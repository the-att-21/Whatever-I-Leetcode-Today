https://leetcode.com/problems/minimum-falling-path-sum/description/
Solution : 
class Solution {
public:
    int n;
    int dp[1000][1000];

    int solve(vector<vector<int>>& matrix, int i, int j){
        if(i > n-1) return 0;
        if(j < 0 or j > n -1) return 10000;

        if(dp[i][j] != -1) return dp[i][j];

        int a = matrix[i][j] + solve(matrix, i + 1, j);
        int b = matrix[i][j] + solve(matrix, i + 1, j - 1);
        int c = matrix[i][j] + solve(matrix, i + 1, j + 1);

        return dp[i][j] = min({a, b, c});
    }
    int minFallingPathSum(vector<vector<int>>& matrix) {
        memset(dp, -1, sizeof(dp));
        n = matrix.size();
        int ans = INT_MAX;
        for(int i = 0; i < n; i++){
            ans = min(ans, solve(matrix, 0, i));
        }
        return ans;
    }
};
